classdef SPair < Product

% Supresss messsages:
%#ok<*OR2> 

    properties (Constant, Hidden)
        standard_order (1,:) = ["z", "+", "-"];
    end
    properties
        s1 (1,1) string 
        s2 (1,1) string 
    end

    methods
        %%
        function obj = SPair(s1, s2)
            arguments
                s1 (1,1) S
                s2 (1,1) S
            end
            obj@Product(s1, s2)
            obj.s1 = s1.script;
            obj.s2 = s2.script;
        end       
        %%
        function res = multiply(obj, other)
            error("SymbolicClass:Multiplication:NotSupported","Multiplication of S1S2 with another operation is not supported");    
        end
        %%
        function res = simmilar(a, b)            
            % Assert both are of S1S2 type:
            if ~isa(b, 'SPair')
                error("SymbolicClass:NotImplemented", "This function is not implemented");
            end
            %% Check all versions:
            res =  || ...
                  ( a.s1 == b.s2 ) && ( a.s2 == b.s1 ) ; 
        end
        %%
        function [is_similar, pair_order] = permutations_similar(a, b)
            arguments 
                a (1,1) SPair
                b (1,1) SPair
            end
            if ( a.s1 == b.s1 ) && ( a.s2 == b.s2 )
                is_similar = true;
                pair_order = PairOrder.Given;
            elseif ( a.s1 == b.s2 ) && ( a.s2 == b.s1 )
                is_similar = true;
                pair_order = PairOrder.Commuted;
        end
        %%
        function res = get(obj, i)
            % Return as requested:
            assert(i<=2 || i>=1)
            res = obj.subs{i};
        end
        %%       
        
    end
end

%{
            % Both are S type:
            total_coef = s1.coef*s2.coef;            
            if s1.script == s2.script
                res = Product(s1, s2);

            elseif s1.script == "z"  % Our cannonical form is S_+\- before S_z
                res2 = MulOpsSymbolicClass();
                res = SumOpsSymbolicClass();
                if s2.script == "+"
                    relative_coef = +1;
                elseif s2.script == "-"
                    relative_coef = -1;
                end
                res1 = S( s2.script );
                res1.coef = relative_coef;
                res2.sub_operators = { S( s2.script ), S("z") };
                res.sub_operators = {res1, res2};               
                
            elseif ismember(s1.script, ["+", "-"] ) % keep same order
                    res = Product( S(s1.script), S(s2.script) );                    
            else 
                error("SymbolicClass:UnsupportedCase","Not a legit case");    
            end
            res.coef = total_coef;  
%}

